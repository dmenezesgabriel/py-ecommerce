x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong_db
  KONG_PG_HOST: postgres
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kongpassword

services:
  inventory_service:
    hostname: inventory_service
    build:
      context: ./inventory
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./inventory:/app
    networks:
      - ecommerce_network
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    environment:
      BROKER_HOST: rabbitmq
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: inventory
      DATABASE_USER: inventory_app
      DATABASE_PASSWORD: 123abc
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  orders_service:
    hostname: orders_service
    build:
      context: ./orders
      dockerfile: Dockerfile.orders
    ports:
      - "8002:8002"
    volumes:
      - ./orders:/app
    networks:
      - ecommerce_network
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload
    environment:
      INVENTORY_SERVICE_BASE_URL: "http://inventory_service:8001/inventory"
      BROKER_HOST: rabbitmq
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: order
      DATABASE_USER: order_app
      DATABASE_PASSWORD: 123abc
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  payments_service:
    hostname: payments_service
    build:
      context: ./payments
      dockerfile: Dockerfile.payments
    ports:
      - "8003:8003"
    volumes:
      - ./payments:/app
    depends_on:
      - mongo
    networks:
      - ecommerce_network
    command: uvicorn payments_service:app --host 0.0.0.0 --port 8003 --reload
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  delivery_service:
    hostname: delivery_service
    build:
      context: ./delivery
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    volumes:
      - ./delivery:/app
    networks:
      - ecommerce_network
    command: uvicorn main:app --host 0.0.0.0 --port 8004 --reload
    environment:
      ORDER_SERVICE_BASE_URL: "http://orders_service:8002/orders"
      BROKER_HOST: rabbitmq
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: delivery
      DATABASE_USER: delivery_app
      DATABASE_PASSWORD: 123abc
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  postgres:
    hostname: postgres
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres}
    image: postgres:16.0-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_ecommerce:/var/lib/postgresql/data
      - ./scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - ecommerce_network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 30s
      retries: 3

  mongo:
    image: mongo:8.0.0-rc11-jammy
    hostname: mongo-db
    ports:
      - "27017:27017"
    volumes:
      - mongo_ecommerce:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    networks:
      - ecommerce_network

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./conf/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./conf/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - ecommerce_network

  keycloak:
    hostname: keycloak
    image: quay.io/keycloak/keycloak:21.1.1
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      # - KC_DB=postgres
      # - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak_db
      # - KC_DB_USERNAME=keycloak
      # - KC_DB_PASSWORD=keycloakpassword
    ports:
      - "8070:8070"
    command:
      - "start-dev"
      - "--http-port=8070"
      - "--import-realm"
    networks:
      - ecommerce_network
    volumes:
      - ./conf/keycloak/realm.json:/opt/keycloak/data/import/realm.json
    # depends_on:
    #   - postgres

  kong-migrations:
    image: kong/kong-gateway:3.7.1.2
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
    networks:
      - ecommerce_network
    depends_on:
      - postgres

  kong:
    hostname: kong
    image: kong/kong-gateway:3.7.1.2
    environment:
      <<: *kong-env
      KONG_DATABASE: "off" # Database must be off to use KONG_DECLARATIVE_CONFIG
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8101
      KONG_PROXY_LISTEN: 0.0.0.0:8100
      KONG_ADMIN_GUI_URL: http://localhost:8102
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
    ports:
      - "8100:8100/tcp"
      - "8543:8543/tcp"
      - "8101:8101/tcp"
      - "8544:8544/tcp"
      - "8102:8102/tcp"
    volumes:
      - ./conf/kong/kong.yml:/kong/declarative/kong.yml
    networks:
      - ecommerce_network
    # depends_on:
    #   - kong-migrations

networks:
  ecommerce_network:
    driver: bridge

volumes:
  postgres_ecommerce:
  mongo_ecommerce:
